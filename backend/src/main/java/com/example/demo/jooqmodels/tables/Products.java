/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.enums.ProductStatus;
import com.example.demo.jooqmodels.enums.ProductType;
import com.example.demo.jooqmodels.tables.CustomerCartSimpleItems.CustomerCartSimpleItemsPath;
import com.example.demo.jooqmodels.tables.Customers.CustomersPath;
import com.example.demo.jooqmodels.tables.OrderLineSimpleItems.OrderLineSimpleItemsPath;
import com.example.demo.jooqmodels.tables.Orders.OrdersPath;
import com.example.demo.jooqmodels.tables.ProductAssociationTypes.ProductAssociationTypesPath;
import com.example.demo.jooqmodels.tables.ProductAssociations.ProductAssociationsPath;
import com.example.demo.jooqmodels.tables.ProductConfigurableOptions.ProductConfigurableOptionsPath;
import com.example.demo.jooqmodels.tables.ProductOptions.ProductOptionsPath;
import com.example.demo.jooqmodels.tables.ProductReviews.ProductReviewsPath;
import com.example.demo.jooqmodels.tables.ProductTaxons.ProductTaxonsPath;
import com.example.demo.jooqmodels.tables.ProductVariants.ProductVariantsPath;
import com.example.demo.jooqmodels.tables.Taxons.TaxonsPath;
import com.example.demo.jooqmodels.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>public.products.id</code>.
     */
    public final TableField<ProductsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.products.pricing</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> PRICING = createField(DSL.name("pricing"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.products.product_name</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.products.product_description</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_DESCRIPTION = createField(DSL.name("product_description"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.products.product_type</code>.
     */
    public final TableField<ProductsRecord, ProductType> PRODUCT_TYPE = createField(DSL.name("product_type"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'SIMPLE'::product_type"), SQLDataType.VARCHAR)).asEnumDataType(ProductType.class), this, "");

    /**
     * The column <code>public.products.taxon_id</code>.
     */
    public final TableField<ProductsRecord, Integer> TAXON_ID = createField(DSL.name("taxon_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.products.product_status</code>.
     */
    public final TableField<ProductsRecord, ProductStatus> PRODUCT_STATUS = createField(DSL.name("product_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::product_status"), SQLDataType.VARCHAR)).asEnumDataType(ProductStatus.class), this, "");

    /**
     * The column <code>public.products.product_image_url</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCT_IMAGE_URL = createField(DSL.name("product_image_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.products.updated_at</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.products.created_at</code>.
     */
    public final TableField<ProductsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>public.products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductsPath extends Products implements Path<ProductsRecord> {
        public <O extends Record> ProductsPath(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductsPath(Name alias, Table<ProductsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductsPath as(String alias) {
            return new ProductsPath(DSL.name(alias), this);
        }

        @Override
        public ProductsPath as(Name alias) {
            return new ProductsPath(alias, this);
        }

        @Override
        public ProductsPath as(Table<?> alias) {
            return new ProductsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductsRecord, Integer> getIdentity() {
        return (Identity<ProductsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCTS__PRODUCTS_TAXON_ID_FKEY);
    }

    private transient TaxonsPath _taxons;

    /**
     * Get the implicit join path to the <code>public.taxons</code> table.
     */
    public TaxonsPath taxons() {
        if (_taxons == null)
            _taxons = new TaxonsPath(this, Keys.PRODUCTS__PRODUCTS_TAXON_ID_FKEY, null);

        return _taxons;
    }

    private transient CustomerCartSimpleItemsPath _customerCartSimpleItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.customer_cart_simple_items</code> table
     */
    public CustomerCartSimpleItemsPath customerCartSimpleItems() {
        if (_customerCartSimpleItems == null)
            _customerCartSimpleItems = new CustomerCartSimpleItemsPath(this, null, Keys.CUSTOMER_CART_SIMPLE_ITEMS__CUSTOMER_CART_SIMPLE_ITEMS_PRODUCT_ID_FKEY.getInverseKey());

        return _customerCartSimpleItems;
    }

    private transient OrderLineSimpleItemsPath _orderLineSimpleItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_line_simple_items</code> table
     */
    public OrderLineSimpleItemsPath orderLineSimpleItems() {
        if (_orderLineSimpleItems == null)
            _orderLineSimpleItems = new OrderLineSimpleItemsPath(this, null, Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_PRODUCT_ID_FKEY.getInverseKey());

        return _orderLineSimpleItems;
    }

    private transient ProductAssociationsPath _productAssociations;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_associations</code> table
     */
    public ProductAssociationsPath productAssociations() {
        if (_productAssociations == null)
            _productAssociations = new ProductAssociationsPath(this, null, Keys.PRODUCT_ASSOCIATIONS__PRODUCT_ASSOCIATIONS_PRODUCT_ID_FKEY.getInverseKey());

        return _productAssociations;
    }

    private transient ProductConfigurableOptionsPath _productConfigurableOptions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_configurable_options</code> table
     */
    public ProductConfigurableOptionsPath productConfigurableOptions() {
        if (_productConfigurableOptions == null)
            _productConfigurableOptions = new ProductConfigurableOptionsPath(this, null, Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_ID_FKEY.getInverseKey());

        return _productConfigurableOptions;
    }

    private transient ProductReviewsPath _productReviews;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_reviews</code> table
     */
    public ProductReviewsPath productReviews() {
        if (_productReviews == null)
            _productReviews = new ProductReviewsPath(this, null, Keys.PRODUCT_REVIEWS__PRODUCT_REVIEWS_PRODUCT_ID_FKEY.getInverseKey());

        return _productReviews;
    }

    private transient ProductTaxonsPath _productTaxons;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_taxons</code> table
     */
    public ProductTaxonsPath productTaxons() {
        if (_productTaxons == null)
            _productTaxons = new ProductTaxonsPath(this, null, Keys.PRODUCT_TAXONS__PRODUCT_TAXONS_PRODUCT_ID_FKEY.getInverseKey());

        return _productTaxons;
    }

    private transient ProductVariantsPath _productVariants;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_variants</code> table
     */
    public ProductVariantsPath productVariants() {
        if (_productVariants == null)
            _productVariants = new ProductVariantsPath(this, null, Keys.PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY.getInverseKey());

        return _productVariants;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.customers</code> table
     */
    public CustomersPath customers() {
        return customerCartSimpleItems().customers();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.product_association_types</code> table
     */
    public ProductAssociationTypesPath productAssociationTypes() {
        return productAssociations().productAssociationTypes();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.product_options</code> table
     */
    public ProductOptionsPath productOptions() {
        return productConfigurableOptions().productOptions();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.orders</code>
     * table
     */
    public OrdersPath orders() {
        return productReviews().orders();
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    @Override
    public Products as(Table<?> alias) {
        return new Products(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Table<?> name) {
        return new Products(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition condition) {
        return new Products(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
