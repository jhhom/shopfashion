/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.CustomerCartConfigurableItems.CustomerCartConfigurableItemsPath;
import com.example.demo.jooqmodels.tables.CustomerCartSimpleItems.CustomerCartSimpleItemsPath;
import com.example.demo.jooqmodels.tables.Orders.OrdersPath;
import com.example.demo.jooqmodels.tables.ProductVariants.ProductVariantsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.CustomersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customers</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>public.customers.id</code>.
     */
    public final TableField<CustomersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.customers.email</code>.
     */
    public final TableField<CustomersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.customers.password</code>.
     */
    public final TableField<CustomersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.customers.updated_at</code>.
     */
    public final TableField<CustomersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.customers.created_at</code>.
     */
    public final TableField<CustomersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>public.customers</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    /**
     * Create a <code>public.customers</code> table reference
     */
    public Customers() {
        this(DSL.name("customers"), null);
    }

    public <O extends Record> Customers(Table<O> path, ForeignKey<O, CustomersRecord> childPath, InverseForeignKey<O, CustomersRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomersPath extends Customers implements Path<CustomersRecord> {
        public <O extends Record> CustomersPath(Table<O> path, ForeignKey<O, CustomersRecord> childPath, InverseForeignKey<O, CustomersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomersPath(Name alias, Table<CustomersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomersPath as(String alias) {
            return new CustomersPath(DSL.name(alias), this);
        }

        @Override
        public CustomersPath as(Name alias) {
            return new CustomersPath(alias, this);
        }

        @Override
        public CustomersPath as(Table<?> alias) {
            return new CustomersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CustomersRecord, Integer> getIdentity() {
        return (Identity<CustomersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.CUSTOMERS_PKEY;
    }

    @Override
    public List<UniqueKey<CustomersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CUSTOMERS_EMAIL_KEY);
    }

    private transient CustomerCartConfigurableItemsPath _customerCartConfigurableItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.customer_cart_configurable_items</code> table
     */
    public CustomerCartConfigurableItemsPath customerCartConfigurableItems() {
        if (_customerCartConfigurableItems == null)
            _customerCartConfigurableItems = new CustomerCartConfigurableItemsPath(this, null, Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_CUSTOMER_ID_FKEY.getInverseKey());

        return _customerCartConfigurableItems;
    }

    private transient CustomerCartSimpleItemsPath _customerCartSimpleItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.customer_cart_simple_items</code> table
     */
    public CustomerCartSimpleItemsPath customerCartSimpleItems() {
        if (_customerCartSimpleItems == null)
            _customerCartSimpleItems = new CustomerCartSimpleItemsPath(this, null, Keys.CUSTOMER_CART_SIMPLE_ITEMS__CUSTOMER_CART_SIMPLE_ITEMS_CUSTOMER_ID_FKEY.getInverseKey());

        return _customerCartSimpleItems;
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit to-many join path to the <code>public.orders</code>
     * table
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, null, Keys.ORDERS__ORDERS_CUSTOMER_ID_FKEY.getInverseKey());

        return _orders;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.product_variants</code> table
     */
    public ProductVariantsPath productVariants() {
        return customerCartConfigurableItems().productVariants();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.products</code> table
     */
    public ProductsPath products() {
        return customerCartSimpleItems().products();
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    @Override
    public Customers as(Table<?> alias) {
        return new Customers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Table<?> name) {
        return new Customers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Condition condition) {
        return new Customers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
