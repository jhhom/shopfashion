/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.ProductConfigurableOptions.ProductConfigurableOptionsPath;
import com.example.demo.jooqmodels.tables.ProductOptionValues.ProductOptionValuesPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.ProductOptionsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductOptions extends TableImpl<ProductOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_options</code>
     */
    public static final ProductOptions PRODUCT_OPTIONS = new ProductOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductOptionsRecord> getRecordType() {
        return ProductOptionsRecord.class;
    }

    /**
     * The column <code>public.product_options.code</code>.
     */
    public final TableField<ProductOptionsRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.product_options.option_name</code>.
     */
    public final TableField<ProductOptionsRecord, String> OPTION_NAME = createField(DSL.name("option_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.product_options.position</code>.
     */
    public final TableField<ProductOptionsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_options.updated_at</code>.
     */
    public final TableField<ProductOptionsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.product_options.created_at</code>.
     */
    public final TableField<ProductOptionsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private ProductOptions(Name alias, Table<ProductOptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductOptions(Name alias, Table<ProductOptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_options</code> table reference
     */
    public ProductOptions(String alias) {
        this(DSL.name(alias), PRODUCT_OPTIONS);
    }

    /**
     * Create an aliased <code>public.product_options</code> table reference
     */
    public ProductOptions(Name alias) {
        this(alias, PRODUCT_OPTIONS);
    }

    /**
     * Create a <code>public.product_options</code> table reference
     */
    public ProductOptions() {
        this(DSL.name("product_options"), null);
    }

    public <O extends Record> ProductOptions(Table<O> path, ForeignKey<O, ProductOptionsRecord> childPath, InverseForeignKey<O, ProductOptionsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_OPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductOptionsPath extends ProductOptions implements Path<ProductOptionsRecord> {
        public <O extends Record> ProductOptionsPath(Table<O> path, ForeignKey<O, ProductOptionsRecord> childPath, InverseForeignKey<O, ProductOptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductOptionsPath(Name alias, Table<ProductOptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductOptionsPath as(String alias) {
            return new ProductOptionsPath(DSL.name(alias), this);
        }

        @Override
        public ProductOptionsPath as(Name alias) {
            return new ProductOptionsPath(alias, this);
        }

        @Override
        public ProductOptionsPath as(Table<?> alias) {
            return new ProductOptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ProductOptionsRecord> getPrimaryKey() {
        return Keys.PRODUCT_OPTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<ProductOptionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRODUCT_OPTIONS_POSITION_KEY);
    }

    private transient ProductConfigurableOptionsPath _productConfigurableOptions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_configurable_options</code> table
     */
    public ProductConfigurableOptionsPath productConfigurableOptions() {
        if (_productConfigurableOptions == null)
            _productConfigurableOptions = new ProductConfigurableOptionsPath(this, null, Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_OPTION_CODE_FKEY.getInverseKey());

        return _productConfigurableOptions;
    }

    private transient ProductOptionValuesPath _productOptionValues;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_option_values</code> table
     */
    public ProductOptionValuesPath productOptionValues() {
        if (_productOptionValues == null)
            _productOptionValues = new ProductOptionValuesPath(this, null, Keys.PRODUCT_OPTION_VALUES__PRODUCT_OPTION_VALUES_OPTION_CODE_FKEY.getInverseKey());

        return _productOptionValues;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.products</code> table
     */
    public ProductsPath products() {
        return productConfigurableOptions().products();
    }

    @Override
    public ProductOptions as(String alias) {
        return new ProductOptions(DSL.name(alias), this);
    }

    @Override
    public ProductOptions as(Name alias) {
        return new ProductOptions(alias, this);
    }

    @Override
    public ProductOptions as(Table<?> alias) {
        return new ProductOptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOptions rename(String name) {
        return new ProductOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOptions rename(Name name) {
        return new ProductOptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOptions rename(Table<?> name) {
        return new ProductOptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions where(Condition condition) {
        return new ProductOptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductOptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductOptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductOptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductOptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductOptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
