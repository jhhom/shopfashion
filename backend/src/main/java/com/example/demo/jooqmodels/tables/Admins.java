/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.records.AdminsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Admins extends TableImpl<AdminsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.admins</code>
     */
    public static final Admins ADMINS = new Admins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminsRecord> getRecordType() {
        return AdminsRecord.class;
    }

    /**
     * The column <code>public.admins.id</code>.
     */
    public final TableField<AdminsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.admins.email</code>.
     */
    public final TableField<AdminsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.admins.password</code>.
     */
    public final TableField<AdminsRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.admins.username</code>.
     */
    public final TableField<AdminsRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.admins.updated_at</code>.
     */
    public final TableField<AdminsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.admins.created_at</code>.
     */
    public final TableField<AdminsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Admins(Name alias, Table<AdminsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Admins(Name alias, Table<AdminsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.admins</code> table reference
     */
    public Admins(String alias) {
        this(DSL.name(alias), ADMINS);
    }

    /**
     * Create an aliased <code>public.admins</code> table reference
     */
    public Admins(Name alias) {
        this(alias, ADMINS);
    }

    /**
     * Create a <code>public.admins</code> table reference
     */
    public Admins() {
        this(DSL.name("admins"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AdminsRecord, Integer> getIdentity() {
        return (Identity<AdminsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminsRecord> getPrimaryKey() {
        return Keys.ADMINS_PKEY;
    }

    @Override
    public List<UniqueKey<AdminsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ADMINS_EMAIL_KEY, Keys.ADMINS_USERNAME_KEY);
    }

    @Override
    public Admins as(String alias) {
        return new Admins(DSL.name(alias), this);
    }

    @Override
    public Admins as(Name alias) {
        return new Admins(alias, this);
    }

    @Override
    public Admins as(Table<?> alias) {
        return new Admins(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(String name) {
        return new Admins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(Name name) {
        return new Admins(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(Table<?> name) {
        return new Admins(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins where(Condition condition) {
        return new Admins(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Admins where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Admins where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Admins where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Admins where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Admins whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
