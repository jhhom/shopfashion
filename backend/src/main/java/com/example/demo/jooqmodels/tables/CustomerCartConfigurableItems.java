/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.Customers.CustomersPath;
import com.example.demo.jooqmodels.tables.ProductVariants.ProductVariantsPath;
import com.example.demo.jooqmodels.tables.records.CustomerCartConfigurableItemsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CustomerCartConfigurableItems extends TableImpl<CustomerCartConfigurableItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.customer_cart_configurable_items</code>
     */
    public static final CustomerCartConfigurableItems CUSTOMER_CART_CONFIGURABLE_ITEMS = new CustomerCartConfigurableItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerCartConfigurableItemsRecord> getRecordType() {
        return CustomerCartConfigurableItemsRecord.class;
    }

    /**
     * The column
     * <code>public.customer_cart_configurable_items.customer_id</code>.
     */
    public final TableField<CustomerCartConfigurableItemsRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.customer_cart_configurable_items.product_variant_id</code>.
     */
    public final TableField<CustomerCartConfigurableItemsRecord, Integer> PRODUCT_VARIANT_ID = createField(DSL.name("product_variant_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.customer_cart_configurable_items.quantity</code>.
     */
    public final TableField<CustomerCartConfigurableItemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.customer_cart_configurable_items.added_at</code>.
     */
    public final TableField<CustomerCartConfigurableItemsRecord, LocalDateTime> ADDED_AT = createField(DSL.name("added_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private CustomerCartConfigurableItems(Name alias, Table<CustomerCartConfigurableItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private CustomerCartConfigurableItems(Name alias, Table<CustomerCartConfigurableItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.customer_cart_configurable_items</code>
     * table reference
     */
    public CustomerCartConfigurableItems(String alias) {
        this(DSL.name(alias), CUSTOMER_CART_CONFIGURABLE_ITEMS);
    }

    /**
     * Create an aliased <code>public.customer_cart_configurable_items</code>
     * table reference
     */
    public CustomerCartConfigurableItems(Name alias) {
        this(alias, CUSTOMER_CART_CONFIGURABLE_ITEMS);
    }

    /**
     * Create a <code>public.customer_cart_configurable_items</code> table
     * reference
     */
    public CustomerCartConfigurableItems() {
        this(DSL.name("customer_cart_configurable_items"), null);
    }

    public <O extends Record> CustomerCartConfigurableItems(Table<O> path, ForeignKey<O, CustomerCartConfigurableItemsRecord> childPath, InverseForeignKey<O, CustomerCartConfigurableItemsRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMER_CART_CONFIGURABLE_ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomerCartConfigurableItemsPath extends CustomerCartConfigurableItems implements Path<CustomerCartConfigurableItemsRecord> {
        public <O extends Record> CustomerCartConfigurableItemsPath(Table<O> path, ForeignKey<O, CustomerCartConfigurableItemsRecord> childPath, InverseForeignKey<O, CustomerCartConfigurableItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomerCartConfigurableItemsPath(Name alias, Table<CustomerCartConfigurableItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomerCartConfigurableItemsPath as(String alias) {
            return new CustomerCartConfigurableItemsPath(DSL.name(alias), this);
        }

        @Override
        public CustomerCartConfigurableItemsPath as(Name alias) {
            return new CustomerCartConfigurableItemsPath(alias, this);
        }

        @Override
        public CustomerCartConfigurableItemsPath as(Table<?> alias) {
            return new CustomerCartConfigurableItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CustomerCartConfigurableItemsRecord> getPrimaryKey() {
        return Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<CustomerCartConfigurableItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_CUSTOMER_ID_FKEY, Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_PRODUCT_VARIANT_ID_FKEY);
    }

    private transient CustomersPath _customers;

    /**
     * Get the implicit join path to the <code>public.customers</code> table.
     */
    public CustomersPath customers() {
        if (_customers == null)
            _customers = new CustomersPath(this, Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_CUSTOMER_ID_FKEY, null);

        return _customers;
    }

    private transient ProductVariantsPath _productVariants;

    /**
     * Get the implicit join path to the <code>public.product_variants</code>
     * table.
     */
    public ProductVariantsPath productVariants() {
        if (_productVariants == null)
            _productVariants = new ProductVariantsPath(this, Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_PRODUCT_VARIANT_ID_FKEY, null);

        return _productVariants;
    }

    @Override
    public CustomerCartConfigurableItems as(String alias) {
        return new CustomerCartConfigurableItems(DSL.name(alias), this);
    }

    @Override
    public CustomerCartConfigurableItems as(Name alias) {
        return new CustomerCartConfigurableItems(alias, this);
    }

    @Override
    public CustomerCartConfigurableItems as(Table<?> alias) {
        return new CustomerCartConfigurableItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerCartConfigurableItems rename(String name) {
        return new CustomerCartConfigurableItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerCartConfigurableItems rename(Name name) {
        return new CustomerCartConfigurableItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomerCartConfigurableItems rename(Table<?> name) {
        return new CustomerCartConfigurableItems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems where(Condition condition) {
        return new CustomerCartConfigurableItems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomerCartConfigurableItems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomerCartConfigurableItems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomerCartConfigurableItems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public CustomerCartConfigurableItems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public CustomerCartConfigurableItems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
