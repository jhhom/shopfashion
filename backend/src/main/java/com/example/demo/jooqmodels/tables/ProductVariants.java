/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.enums.ProductStatus;
import com.example.demo.jooqmodels.tables.CustomerCartConfigurableItems.CustomerCartConfigurableItemsPath;
import com.example.demo.jooqmodels.tables.Customers.CustomersPath;
import com.example.demo.jooqmodels.tables.OrderLineConfigurableItems.OrderLineConfigurableItemsPath;
import com.example.demo.jooqmodels.tables.ProductOptionValues.ProductOptionValuesPath;
import com.example.demo.jooqmodels.tables.ProductVariantOptions.ProductVariantOptionsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.ProductVariantsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductVariants extends TableImpl<ProductVariantsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_variants</code>
     */
    public static final ProductVariants PRODUCT_VARIANTS = new ProductVariants();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductVariantsRecord> getRecordType() {
        return ProductVariantsRecord.class;
    }

    /**
     * The column <code>public.product_variants.id</code>.
     */
    public final TableField<ProductVariantsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_variants.pricing</code>.
     */
    public final TableField<ProductVariantsRecord, BigDecimal> PRICING = createField(DSL.name("pricing"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.product_variants.variant_name</code>.
     */
    public final TableField<ProductVariantsRecord, String> VARIANT_NAME = createField(DSL.name("variant_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.product_variants.product_id</code>.
     */
    public final TableField<ProductVariantsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_variants.position</code>.
     */
    public final TableField<ProductVariantsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.product_variants.product_status</code>.
     */
    public final TableField<ProductVariantsRecord, ProductStatus> PRODUCT_STATUS = createField(DSL.name("product_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::product_status"), SQLDataType.VARCHAR)).asEnumDataType(ProductStatus.class), this, "");

    /**
     * The column
     * <code>public.product_variants.product_variant_image_url</code>.
     */
    public final TableField<ProductVariantsRecord, String> PRODUCT_VARIANT_IMAGE_URL = createField(DSL.name("product_variant_image_url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.product_variants.updated_at</code>.
     */
    public final TableField<ProductVariantsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.product_variants.created_at</code>.
     */
    public final TableField<ProductVariantsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private ProductVariants(Name alias, Table<ProductVariantsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductVariants(Name alias, Table<ProductVariantsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_variants</code> table reference
     */
    public ProductVariants(String alias) {
        this(DSL.name(alias), PRODUCT_VARIANTS);
    }

    /**
     * Create an aliased <code>public.product_variants</code> table reference
     */
    public ProductVariants(Name alias) {
        this(alias, PRODUCT_VARIANTS);
    }

    /**
     * Create a <code>public.product_variants</code> table reference
     */
    public ProductVariants() {
        this(DSL.name("product_variants"), null);
    }

    public <O extends Record> ProductVariants(Table<O> path, ForeignKey<O, ProductVariantsRecord> childPath, InverseForeignKey<O, ProductVariantsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_VARIANTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductVariantsPath extends ProductVariants implements Path<ProductVariantsRecord> {
        public <O extends Record> ProductVariantsPath(Table<O> path, ForeignKey<O, ProductVariantsRecord> childPath, InverseForeignKey<O, ProductVariantsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductVariantsPath(Name alias, Table<ProductVariantsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductVariantsPath as(String alias) {
            return new ProductVariantsPath(DSL.name(alias), this);
        }

        @Override
        public ProductVariantsPath as(Name alias) {
            return new ProductVariantsPath(alias, this);
        }

        @Override
        public ProductVariantsPath as(Table<?> alias) {
            return new ProductVariantsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductVariantsRecord, Integer> getIdentity() {
        return (Identity<ProductVariantsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductVariantsRecord> getPrimaryKey() {
        return Keys.PRODUCT_VARIANTS_PKEY;
    }

    @Override
    public List<UniqueKey<ProductVariantsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRODUCT_VARIANTS_PRODUCT_ID_VARIANT_NAME_KEY, Keys.PRODUCT_VARIANTS_PRODUCT_ID_POSITION_KEY);
    }

    @Override
    public List<ForeignKey<ProductVariantsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY);
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY, null);

        return _products;
    }

    private transient CustomerCartConfigurableItemsPath _customerCartConfigurableItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.customer_cart_configurable_items</code> table
     */
    public CustomerCartConfigurableItemsPath customerCartConfigurableItems() {
        if (_customerCartConfigurableItems == null)
            _customerCartConfigurableItems = new CustomerCartConfigurableItemsPath(this, null, Keys.CUSTOMER_CART_CONFIGURABLE_ITEMS__CUSTOMER_CART_CONFIGURABLE_ITEMS_PRODUCT_VARIANT_ID_FKEY.getInverseKey());

        return _customerCartConfigurableItems;
    }

    private transient OrderLineConfigurableItemsPath _orderLineConfigurableItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_line_configurable_items</code> table
     */
    public OrderLineConfigurableItemsPath orderLineConfigurableItems() {
        if (_orderLineConfigurableItems == null)
            _orderLineConfigurableItems = new OrderLineConfigurableItemsPath(this, null, Keys.ORDER_LINE_CONFIGURABLE_ITEMS__ORDER_LINE_CONFIGURABLE_ITEMS_PRODUCT_VARIANT_ID_FKEY.getInverseKey());

        return _orderLineConfigurableItems;
    }

    private transient ProductVariantOptionsPath _productVariantOptions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_variant_options</code> table
     */
    public ProductVariantOptionsPath productVariantOptions() {
        if (_productVariantOptions == null)
            _productVariantOptions = new ProductVariantOptionsPath(this, null, Keys.PRODUCT_VARIANT_OPTIONS__PRODUCT_VARIANT_OPTIONS_PRODUCT_VARIANT_ID_FKEY.getInverseKey());

        return _productVariantOptions;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.customers</code> table
     */
    public CustomersPath customers() {
        return customerCartConfigurableItems().customers();
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.product_option_values</code> table
     */
    public ProductOptionValuesPath productOptionValues() {
        return productVariantOptions().productOptionValues();
    }

    @Override
    public ProductVariants as(String alias) {
        return new ProductVariants(DSL.name(alias), this);
    }

    @Override
    public ProductVariants as(Name alias) {
        return new ProductVariants(alias, this);
    }

    @Override
    public ProductVariants as(Table<?> alias) {
        return new ProductVariants(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductVariants rename(String name) {
        return new ProductVariants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductVariants rename(Name name) {
        return new ProductVariants(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductVariants rename(Table<?> name) {
        return new ProductVariants(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants where(Condition condition) {
        return new ProductVariants(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductVariants where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductVariants where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductVariants where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductVariants where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductVariants whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
