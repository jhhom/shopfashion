/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.enums.OrderLineItemStatus;
import com.example.demo.jooqmodels.tables.Orders.OrdersPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.OrderLineSimpleItemsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrderLineSimpleItems extends TableImpl<OrderLineSimpleItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_line_simple_items</code>
     */
    public static final OrderLineSimpleItems ORDER_LINE_SIMPLE_ITEMS = new OrderLineSimpleItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderLineSimpleItemsRecord> getRecordType() {
        return OrderLineSimpleItemsRecord.class;
    }

    /**
     * The column <code>public.order_line_simple_items.order_id</code>.
     */
    public final TableField<OrderLineSimpleItemsRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_line_simple_items.product_id</code>.
     */
    public final TableField<OrderLineSimpleItemsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_line_simple_items.quantity</code>.
     */
    public final TableField<OrderLineSimpleItemsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_line_simple_items.unit_price</code>.
     */
    public final TableField<OrderLineSimpleItemsRecord, BigDecimal> UNIT_PRICE = createField(DSL.name("unit_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column
     * <code>public.order_line_simple_items.order_line_item_status</code>.
     */
    public final TableField<OrderLineSimpleItemsRecord, OrderLineItemStatus> ORDER_LINE_ITEM_STATUS = createField(DSL.name("order_line_item_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'PROCESSING'::order_line_item_status"), SQLDataType.VARCHAR)).asEnumDataType(OrderLineItemStatus.class), this, "");

    private OrderLineSimpleItems(Name alias, Table<OrderLineSimpleItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrderLineSimpleItems(Name alias, Table<OrderLineSimpleItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.order_line_simple_items</code> table
     * reference
     */
    public OrderLineSimpleItems(String alias) {
        this(DSL.name(alias), ORDER_LINE_SIMPLE_ITEMS);
    }

    /**
     * Create an aliased <code>public.order_line_simple_items</code> table
     * reference
     */
    public OrderLineSimpleItems(Name alias) {
        this(alias, ORDER_LINE_SIMPLE_ITEMS);
    }

    /**
     * Create a <code>public.order_line_simple_items</code> table reference
     */
    public OrderLineSimpleItems() {
        this(DSL.name("order_line_simple_items"), null);
    }

    public <O extends Record> OrderLineSimpleItems(Table<O> path, ForeignKey<O, OrderLineSimpleItemsRecord> childPath, InverseForeignKey<O, OrderLineSimpleItemsRecord> parentPath) {
        super(path, childPath, parentPath, ORDER_LINE_SIMPLE_ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrderLineSimpleItemsPath extends OrderLineSimpleItems implements Path<OrderLineSimpleItemsRecord> {
        public <O extends Record> OrderLineSimpleItemsPath(Table<O> path, ForeignKey<O, OrderLineSimpleItemsRecord> childPath, InverseForeignKey<O, OrderLineSimpleItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrderLineSimpleItemsPath(Name alias, Table<OrderLineSimpleItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrderLineSimpleItemsPath as(String alias) {
            return new OrderLineSimpleItemsPath(DSL.name(alias), this);
        }

        @Override
        public OrderLineSimpleItemsPath as(Name alias) {
            return new OrderLineSimpleItemsPath(alias, this);
        }

        @Override
        public OrderLineSimpleItemsPath as(Table<?> alias) {
            return new OrderLineSimpleItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<OrderLineSimpleItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_ORDER_ID_FKEY, Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_PRODUCT_ID_FKEY);
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_ORDER_ID_FKEY, null);

        return _orders;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_PRODUCT_ID_FKEY, null);

        return _products;
    }

    @Override
    public OrderLineSimpleItems as(String alias) {
        return new OrderLineSimpleItems(DSL.name(alias), this);
    }

    @Override
    public OrderLineSimpleItems as(Name alias) {
        return new OrderLineSimpleItems(alias, this);
    }

    @Override
    public OrderLineSimpleItems as(Table<?> alias) {
        return new OrderLineSimpleItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLineSimpleItems rename(String name) {
        return new OrderLineSimpleItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLineSimpleItems rename(Name name) {
        return new OrderLineSimpleItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLineSimpleItems rename(Table<?> name) {
        return new OrderLineSimpleItems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems where(Condition condition) {
        return new OrderLineSimpleItems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderLineSimpleItems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderLineSimpleItems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderLineSimpleItems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderLineSimpleItems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderLineSimpleItems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
