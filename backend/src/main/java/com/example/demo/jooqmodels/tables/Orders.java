/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.enums.OrderStatus;
import com.example.demo.jooqmodels.tables.Customers.CustomersPath;
import com.example.demo.jooqmodels.tables.OrderLineConfigurableItems.OrderLineConfigurableItemsPath;
import com.example.demo.jooqmodels.tables.OrderLineSimpleItems.OrderLineSimpleItemsPath;
import com.example.demo.jooqmodels.tables.ProductReviews.ProductReviewsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>public.orders.id</code>.
     */
    public final TableField<OrdersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orders.customer_id</code>.
     */
    public final TableField<OrdersRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.orders.shipping_fee</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> SHIPPING_FEE = createField(DSL.name("shipping_fee"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.orders.total_price</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.NUMERIC(10, 2).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.orders.order_status</code>.
     */
    public final TableField<OrdersRecord, OrderStatus> ORDER_STATUS = createField(DSL.name("order_status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'PENDING_PAYMENT'::order_status"), SQLDataType.VARCHAR)).asEnumDataType(OrderStatus.class), this, "");

    /**
     * The column <code>public.orders.delivery_address</code>.
     */
    public final TableField<OrdersRecord, JSONB> DELIVERY_ADDRESS = createField(DSL.name("delivery_address"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.orders.created_at</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>public.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    public <O extends Record> Orders(Table<O> path, ForeignKey<O, OrdersRecord> childPath, InverseForeignKey<O, OrdersRecord> parentPath) {
        super(path, childPath, parentPath, ORDERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrdersPath extends Orders implements Path<OrdersRecord> {
        public <O extends Record> OrdersPath(Table<O> path, ForeignKey<O, OrdersRecord> childPath, InverseForeignKey<O, OrdersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrdersPath(Name alias, Table<OrdersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrdersPath as(String alias) {
            return new OrdersPath(DSL.name(alias), this);
        }

        @Override
        public OrdersPath as(Name alias) {
            return new OrdersPath(alias, this);
        }

        @Override
        public OrdersPath as(Table<?> alias) {
            return new OrdersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrdersRecord, Integer> getIdentity() {
        return (Identity<OrdersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.ORDERS_PKEY;
    }

    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERS__ORDERS_CUSTOMER_ID_FKEY);
    }

    private transient CustomersPath _customers;

    /**
     * Get the implicit join path to the <code>public.customers</code> table.
     */
    public CustomersPath customers() {
        if (_customers == null)
            _customers = new CustomersPath(this, Keys.ORDERS__ORDERS_CUSTOMER_ID_FKEY, null);

        return _customers;
    }

    private transient OrderLineConfigurableItemsPath _orderLineConfigurableItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_line_configurable_items</code> table
     */
    public OrderLineConfigurableItemsPath orderLineConfigurableItems() {
        if (_orderLineConfigurableItems == null)
            _orderLineConfigurableItems = new OrderLineConfigurableItemsPath(this, null, Keys.ORDER_LINE_CONFIGURABLE_ITEMS__ORDER_LINE_CONFIGURABLE_ITEMS_ORDER_ID_FKEY.getInverseKey());

        return _orderLineConfigurableItems;
    }

    private transient OrderLineSimpleItemsPath _orderLineSimpleItems;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_line_simple_items</code> table
     */
    public OrderLineSimpleItemsPath orderLineSimpleItems() {
        if (_orderLineSimpleItems == null)
            _orderLineSimpleItems = new OrderLineSimpleItemsPath(this, null, Keys.ORDER_LINE_SIMPLE_ITEMS__ORDER_LINE_SIMPLE_ITEMS_ORDER_ID_FKEY.getInverseKey());

        return _orderLineSimpleItems;
    }

    private transient ProductReviewsPath _productReviews;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_reviews</code> table
     */
    public ProductReviewsPath productReviews() {
        if (_productReviews == null)
            _productReviews = new ProductReviewsPath(this, null, Keys.PRODUCT_REVIEWS__PRODUCT_REVIEWS_ORDER_ID_FKEY.getInverseKey());

        return _productReviews;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.products</code> table
     */
    public ProductsPath products() {
        return productReviews().products();
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    @Override
    public Orders as(Table<?> alias) {
        return new Orders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Table<?> name) {
        return new Orders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Condition condition) {
        return new Orders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Orders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Orders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
