/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.ProductAssociations.ProductAssociationsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.ProductAssociationTypesRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductAssociationTypes extends TableImpl<ProductAssociationTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product_association_types</code>
     */
    public static final ProductAssociationTypes PRODUCT_ASSOCIATION_TYPES = new ProductAssociationTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductAssociationTypesRecord> getRecordType() {
        return ProductAssociationTypesRecord.class;
    }

    /**
     * The column <code>public.product_association_types.id</code>.
     */
    public final TableField<ProductAssociationTypesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_association_types.type_name</code>.
     */
    public final TableField<ProductAssociationTypesRecord, String> TYPE_NAME = createField(DSL.name("type_name"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("''::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.product_association_types.created_at</code>.
     */
    public final TableField<ProductAssociationTypesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private ProductAssociationTypes(Name alias, Table<ProductAssociationTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductAssociationTypes(Name alias, Table<ProductAssociationTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_association_types</code> table
     * reference
     */
    public ProductAssociationTypes(String alias) {
        this(DSL.name(alias), PRODUCT_ASSOCIATION_TYPES);
    }

    /**
     * Create an aliased <code>public.product_association_types</code> table
     * reference
     */
    public ProductAssociationTypes(Name alias) {
        this(alias, PRODUCT_ASSOCIATION_TYPES);
    }

    /**
     * Create a <code>public.product_association_types</code> table reference
     */
    public ProductAssociationTypes() {
        this(DSL.name("product_association_types"), null);
    }

    public <O extends Record> ProductAssociationTypes(Table<O> path, ForeignKey<O, ProductAssociationTypesRecord> childPath, InverseForeignKey<O, ProductAssociationTypesRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_ASSOCIATION_TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductAssociationTypesPath extends ProductAssociationTypes implements Path<ProductAssociationTypesRecord> {
        public <O extends Record> ProductAssociationTypesPath(Table<O> path, ForeignKey<O, ProductAssociationTypesRecord> childPath, InverseForeignKey<O, ProductAssociationTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductAssociationTypesPath(Name alias, Table<ProductAssociationTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductAssociationTypesPath as(String alias) {
            return new ProductAssociationTypesPath(DSL.name(alias), this);
        }

        @Override
        public ProductAssociationTypesPath as(Name alias) {
            return new ProductAssociationTypesPath(alias, this);
        }

        @Override
        public ProductAssociationTypesPath as(Table<?> alias) {
            return new ProductAssociationTypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductAssociationTypesRecord, Integer> getIdentity() {
        return (Identity<ProductAssociationTypesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductAssociationTypesRecord> getPrimaryKey() {
        return Keys.PRODUCT_ASSOCIATION_TYPES_PKEY;
    }

    private transient ProductAssociationsPath _productAssociations;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_associations</code> table
     */
    public ProductAssociationsPath productAssociations() {
        if (_productAssociations == null)
            _productAssociations = new ProductAssociationsPath(this, null, Keys.PRODUCT_ASSOCIATIONS__PRODUCT_ASSOCIATIONS_PRODUCT_ASSOCIATION_TYPE_ID_FKEY.getInverseKey());

        return _productAssociations;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.products</code> table
     */
    public ProductsPath products() {
        return productAssociations().products();
    }

    @Override
    public ProductAssociationTypes as(String alias) {
        return new ProductAssociationTypes(DSL.name(alias), this);
    }

    @Override
    public ProductAssociationTypes as(Name alias) {
        return new ProductAssociationTypes(alias, this);
    }

    @Override
    public ProductAssociationTypes as(Table<?> alias) {
        return new ProductAssociationTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductAssociationTypes rename(String name) {
        return new ProductAssociationTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductAssociationTypes rename(Name name) {
        return new ProductAssociationTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductAssociationTypes rename(Table<?> name) {
        return new ProductAssociationTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes where(Condition condition) {
        return new ProductAssociationTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductAssociationTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductAssociationTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductAssociationTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductAssociationTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductAssociationTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
