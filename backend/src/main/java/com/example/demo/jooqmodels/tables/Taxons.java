/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.ProductTaxons.ProductTaxonsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.Taxons.TaxonsPath;
import com.example.demo.jooqmodels.tables.records.TaxonsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Taxons extends TableImpl<TaxonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.taxons</code>
     */
    public static final Taxons TAXONS = new Taxons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaxonsRecord> getRecordType() {
        return TaxonsRecord.class;
    }

    /**
     * The column <code>public.taxons.id</code>.
     */
    public final TableField<TaxonsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.taxons.parent_id</code>.
     */
    public final TableField<TaxonsRecord, Integer> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.taxons.taxon_name</code>.
     */
    public final TableField<TaxonsRecord, String> TAXON_NAME = createField(DSL.name("taxon_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.taxons.slug</code>.
     */
    public final TableField<TaxonsRecord, String> SLUG = createField(DSL.name("slug"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.taxons.updated_at</code>.
     */
    public final TableField<TaxonsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.taxons.created_at</code>.
     */
    public final TableField<TaxonsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Taxons(Name alias, Table<TaxonsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Taxons(Name alias, Table<TaxonsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.taxons</code> table reference
     */
    public Taxons(String alias) {
        this(DSL.name(alias), TAXONS);
    }

    /**
     * Create an aliased <code>public.taxons</code> table reference
     */
    public Taxons(Name alias) {
        this(alias, TAXONS);
    }

    /**
     * Create a <code>public.taxons</code> table reference
     */
    public Taxons() {
        this(DSL.name("taxons"), null);
    }

    public <O extends Record> Taxons(Table<O> path, ForeignKey<O, TaxonsRecord> childPath, InverseForeignKey<O, TaxonsRecord> parentPath) {
        super(path, childPath, parentPath, TAXONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TaxonsPath extends Taxons implements Path<TaxonsRecord> {
        public <O extends Record> TaxonsPath(Table<O> path, ForeignKey<O, TaxonsRecord> childPath, InverseForeignKey<O, TaxonsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TaxonsPath(Name alias, Table<TaxonsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TaxonsPath as(String alias) {
            return new TaxonsPath(DSL.name(alias), this);
        }

        @Override
        public TaxonsPath as(Name alias) {
            return new TaxonsPath(alias, this);
        }

        @Override
        public TaxonsPath as(Table<?> alias) {
            return new TaxonsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TaxonsRecord, Integer> getIdentity() {
        return (Identity<TaxonsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaxonsRecord> getPrimaryKey() {
        return Keys.TAXONS_PKEY;
    }

    @Override
    public List<UniqueKey<TaxonsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TAXONS_PARENT_ID_SLUG_KEY, Keys.TAXONS_PARENT_ID_TAXON_NAME_KEY);
    }

    @Override
    public List<ForeignKey<TaxonsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAXONS__TAXONS_PARENT_ID_FKEY);
    }

    private transient TaxonsPath _taxons;

    /**
     * Get the implicit join path to the <code>public.taxons</code> table.
     */
    public TaxonsPath taxons() {
        if (_taxons == null)
            _taxons = new TaxonsPath(this, Keys.TAXONS__TAXONS_PARENT_ID_FKEY, null);

        return _taxons;
    }

    private transient ProductTaxonsPath _productTaxons;

    /**
     * Get the implicit to-many join path to the
     * <code>public.product_taxons</code> table
     */
    public ProductTaxonsPath productTaxons() {
        if (_productTaxons == null)
            _productTaxons = new ProductTaxonsPath(this, null, Keys.PRODUCT_TAXONS__PRODUCT_TAXONS_TAXON_ID_FKEY.getInverseKey());

        return _productTaxons;
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit to-many join path to the <code>public.products</code>
     * table
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, null, Keys.PRODUCTS__PRODUCTS_TAXON_ID_FKEY.getInverseKey());

        return _products;
    }

    @Override
    public Taxons as(String alias) {
        return new Taxons(DSL.name(alias), this);
    }

    @Override
    public Taxons as(Name alias) {
        return new Taxons(alias, this);
    }

    @Override
    public Taxons as(Table<?> alias) {
        return new Taxons(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Taxons rename(String name) {
        return new Taxons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Taxons rename(Name name) {
        return new Taxons(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Taxons rename(Table<?> name) {
        return new Taxons(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons where(Condition condition) {
        return new Taxons(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taxons where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taxons where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taxons where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Taxons where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Taxons whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
