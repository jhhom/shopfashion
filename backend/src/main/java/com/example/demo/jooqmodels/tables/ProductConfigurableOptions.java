/*
 * This file is generated by jOOQ.
 */
package com.example.demo.jooqmodels.tables;


import com.example.demo.jooqmodels.Keys;
import com.example.demo.jooqmodels.Public;
import com.example.demo.jooqmodels.tables.ProductOptions.ProductOptionsPath;
import com.example.demo.jooqmodels.tables.Products.ProductsPath;
import com.example.demo.jooqmodels.tables.records.ProductConfigurableOptionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductConfigurableOptions extends TableImpl<ProductConfigurableOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.product_configurable_options</code>
     */
    public static final ProductConfigurableOptions PRODUCT_CONFIGURABLE_OPTIONS = new ProductConfigurableOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductConfigurableOptionsRecord> getRecordType() {
        return ProductConfigurableOptionsRecord.class;
    }

    /**
     * The column <code>public.product_configurable_options.id</code>.
     */
    public final TableField<ProductConfigurableOptionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product_configurable_options.product_id</code>.
     */
    public final TableField<ProductConfigurableOptionsRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.product_configurable_options.product_option_code</code>.
     */
    public final TableField<ProductConfigurableOptionsRecord, String> PRODUCT_OPTION_CODE = createField(DSL.name("product_option_code"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private ProductConfigurableOptions(Name alias, Table<ProductConfigurableOptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductConfigurableOptions(Name alias, Table<ProductConfigurableOptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product_configurable_options</code> table
     * reference
     */
    public ProductConfigurableOptions(String alias) {
        this(DSL.name(alias), PRODUCT_CONFIGURABLE_OPTIONS);
    }

    /**
     * Create an aliased <code>public.product_configurable_options</code> table
     * reference
     */
    public ProductConfigurableOptions(Name alias) {
        this(alias, PRODUCT_CONFIGURABLE_OPTIONS);
    }

    /**
     * Create a <code>public.product_configurable_options</code> table reference
     */
    public ProductConfigurableOptions() {
        this(DSL.name("product_configurable_options"), null);
    }

    public <O extends Record> ProductConfigurableOptions(Table<O> path, ForeignKey<O, ProductConfigurableOptionsRecord> childPath, InverseForeignKey<O, ProductConfigurableOptionsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT_CONFIGURABLE_OPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductConfigurableOptionsPath extends ProductConfigurableOptions implements Path<ProductConfigurableOptionsRecord> {
        public <O extends Record> ProductConfigurableOptionsPath(Table<O> path, ForeignKey<O, ProductConfigurableOptionsRecord> childPath, InverseForeignKey<O, ProductConfigurableOptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductConfigurableOptionsPath(Name alias, Table<ProductConfigurableOptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductConfigurableOptionsPath as(String alias) {
            return new ProductConfigurableOptionsPath(DSL.name(alias), this);
        }

        @Override
        public ProductConfigurableOptionsPath as(Name alias) {
            return new ProductConfigurableOptionsPath(alias, this);
        }

        @Override
        public ProductConfigurableOptionsPath as(Table<?> alias) {
            return new ProductConfigurableOptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductConfigurableOptionsRecord, Integer> getIdentity() {
        return (Identity<ProductConfigurableOptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductConfigurableOptionsRecord> getPrimaryKey() {
        return Keys.PRODUCT_CONFIGURABLE_OPTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<ProductConfigurableOptionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_ID_PRODUCT_OPTION_CODE_KEY);
    }

    @Override
    public List<ForeignKey<ProductConfigurableOptionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_ID_FKEY, Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_OPTION_CODE_FKEY);
    }

    private transient ProductsPath _products;

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    public ProductsPath products() {
        if (_products == null)
            _products = new ProductsPath(this, Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_ID_FKEY, null);

        return _products;
    }

    private transient ProductOptionsPath _productOptions;

    /**
     * Get the implicit join path to the <code>public.product_options</code>
     * table.
     */
    public ProductOptionsPath productOptions() {
        if (_productOptions == null)
            _productOptions = new ProductOptionsPath(this, Keys.PRODUCT_CONFIGURABLE_OPTIONS__PRODUCT_CONFIGURABLE_OPTIONS_PRODUCT_OPTION_CODE_FKEY, null);

        return _productOptions;
    }

    @Override
    public ProductConfigurableOptions as(String alias) {
        return new ProductConfigurableOptions(DSL.name(alias), this);
    }

    @Override
    public ProductConfigurableOptions as(Name alias) {
        return new ProductConfigurableOptions(alias, this);
    }

    @Override
    public ProductConfigurableOptions as(Table<?> alias) {
        return new ProductConfigurableOptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductConfigurableOptions rename(String name) {
        return new ProductConfigurableOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductConfigurableOptions rename(Name name) {
        return new ProductConfigurableOptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductConfigurableOptions rename(Table<?> name) {
        return new ProductConfigurableOptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions where(Condition condition) {
        return new ProductConfigurableOptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductConfigurableOptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductConfigurableOptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductConfigurableOptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductConfigurableOptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductConfigurableOptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
